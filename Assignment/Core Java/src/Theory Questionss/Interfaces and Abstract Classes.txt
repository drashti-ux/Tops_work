                                            Interfaces and Abstract Classes

Q1.Abstract Classes and Methods
Ans:
    In Java, an abstract class is a class that cannot be instantiated on its own and is meant to be inherited by other classes. It can contain both abstract methods (methods without a body) and concrete methods (methods with a body).
    
    Abstract Class:
    -An abstract class is a class that is declared with the abstract keyword.
    -It can have abstract methods (methods without a body) and concrete methods (methods with a body).
    -An abstract class cannot be instantiated directly, i.e., you cannot create objects of the abstract class.
    -It is meant to be subclassed, and the subclass must provide implementations for the abstract methods (unless the subclass is also abstract).
    -must inherit into some other class

    Abstract Method:
    -An abstract method is a method declared in an abstract class without providing a body.
    -The subclass must override the abstract method and provide a concrete implementation, unless the subclass is abstract itself.
    
Q2.Interfaces: Multiple Inheritance in Java
Ans:
    -an interface is a reference type, similar to a class, but it can contain only abstract methods (methods without a body), default methods (methods with a body), static methods, and constants. Interfaces cannot have instance variables or constructors, and they are used to represent a contract or a set of abstract behaviors that a class must implement.
    -All fields in an interface are implicitly public, static, and final.
    -A class can implement multiple interfaces, thus inheriting abstract methods from more than one interface.-Interfaces cannot have constructors because they cannot be instantiated directly.

    Multiple Inheritance is mechanism in which the child class inherits the properties from more than one parent classes.
    -java does not support multiple Inheritance because it creates ambiguity when the properties from both the parent classes are inherited in child class or derived class.
    -but it is supported in case of Interface because there is no ambiguity as implementation is provided by the implementation class.

    Diagram:
            interface A             interface B
                |                       |
                +-----------+-----------+
                            |
                         Class C
            
Q3.Implementing Multiple Interface
Ans:
        Interface A{
            void display();
        }
        Interface B{
            void display2();
        }
        class C implements A,B{
            public void display(){
                System.out.println("From Interface A");
            }
            public void display2(){
                System.out.println("From Interface B");
            }
            public static void main(String [] args){
                C obj = new C();
                obj.display();
                obj.display2();
            }
        }