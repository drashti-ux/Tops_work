                                            Constructors and Destructors

 Q1.Constructor Types (Default, Parameterized)
 Ans:
    A constructor is a special method in a class that is called automatically when an object of the class is created. Its purpose is to initialize the object.

    Default Constructor:
    A default constructor is a constructor with no parameters.
    If you donâ€™t explicitly define a constructor, Java provides a default one for you. However, if you define any constructor, the default constructor is no longer provided.
    Purpose: Initializes objects with default values.
    example:
        class Example {
        int number;
        String text;
        // Default constructor
        Example() {
            number = 0;
            text = "Default";
        }
        }
        public class Test {
        public static void main(String[] args) {
            Example obj = new Example(); // Calls the default constructor
        }
        }
    
    Parameterized Constructor:
    A parameterized constructor accepts parameters to initialize the object with specific values.
    Purpose: Allows custom initialization of an object at the time of creation.
    class Example {
        int number;
        String text;

        // Parameterized constructor
        Example(int num, String txt) {
            number = num;
            text = txt;
        }
    }

    public class Test {
        public static void main(String[] args) {
            Example obj = new Example(42, "Hello"); // Passes values to the constructor
        }
    }

Q2.Copy Constructor (Emulated in Java)
Ans:
    A copy constructor is a constructor used to create a new object as a copy of an existing object. While Java does not provide a built-in copy constructor like some languages (e.g., C++), it can be emulated by defining a constructor that accepts an object of the same class as a parameter.

    class Example {
    int number;
    String text;
    // Parameterized constructor
        Example(int num, String txt) {
            this.number = num;
            this.text = txt;
        }
    // Copy constructor
        Example(Example obj) {
            this.number = obj.number; // Copy primitive value
            this.text = obj.text; // Copy reference (shallow copy)
        }
    }
    public class Test {
    public static void main(String[] args) {
        Example original = new Example(42, "Hello"); // Original object
        Example copy = new Example(original); // Create a copy using the copy constructor

        original.display(); // Output: Number: 42, Text: Hello
        copy.display();     // Output: Number: 42, Text: Hello
    }
    }
    
Q3.Constructor Overloading
Ans:
    Constructor overloading in Java refers to defining multiple constructors in the same class with the same name but different parameter lists. Each constructor performs a different task based on the arguments passed during object creation.
